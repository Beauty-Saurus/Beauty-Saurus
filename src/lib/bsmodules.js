const customConfig = require("../../setting/setting-view/beauty.saurus.config.json");

class NavItem {
  constructor(type, docId, position, label) {
    this.type = type;
    this.docId = docId;
    this.position = position;
    this.label = label;
  }

  getNavItem() {
    return {
      type: this.type,
      docId: this.docId,
      position: this.position,
      label: this.label,
    };
  }
}

// side.js 에서 side.js 를 생성해주는 method
exports.getNavSidebar = function () {
  const navItems = customConfig.navbar.items;
  const navSidebar = {};
  navItems.forEach((item) => {
    navSidebar[item.name] = [
      {
        type: "autogenerated",
        dirName: item.name,
      },
    ];
  });

  console.log("navSidebar", navSidebar);
  return navSidebar;
};

// docusaurus.config.js 에서 navbar items 설정해주는 method
exports.getNavItemsObj = function () {
  const navItems = customConfig.navbar.items;
  let navItemsRepo = [];

  navItems.forEach((item) => {
    const navObj = new NavItem(
      item.type,
      item.name + "/" + item.name,
      item.position,
      item.name
    );
    navItemsRepo.push(navObj);
  });
  return navItemsRepo;
};

exports.applycustomCss = function () {
  const root = document.querySelector(":root");
  console.log("customConfig", customConfig);

  //navbar configuration
  root.getElementsByClassName("navbar__logo")[0].style.margin =
    customConfig.navbar["title-margin"];
  root.style.setProperty(
    "--ifm-navbar-background-color",
    customConfig.navbar["background-color"]
  );
  root.style.setProperty("--ifm-navbar-height", customConfig.navbar["height"]);

  //header configuration
  const { header } = customConfig;
  // root.getElementsByClassName(
  //   "heroBanner_src-components-HeaderContents-module"
  // )[0].style.backgroundColor = "#000000";
  root.style.setProperty("--ifm-padding-header-top", header["padding-top"]);
  root.style.setProperty(
    "--ifm-padding-header-bottom",
    header["padding-bottom"]
  );
  root.style.setProperty(
    "--ifm-color-header-background",
    header["background-color"]
  );
  root.style.setProperty(
    "--ifm-fontfamily-header-title",
    header["font-family"]
  );
  root.style.setProperty(
    "--ifm-fontsize-header-title",
    header.title["font-size"]
  );
  root.style.setProperty(
    "--ifm-fontcolor-header-title",
    header.title["font-color"]
  );
  root.style.setProperty(
    "--ifm-fontsize-header-tagline",
    header.tagline["font-size"]
  );
  root.style.setProperty(
    "--ifm-fontcolor-header-tagline",
    header.tagline["font-color"]
  );
  root.style.setProperty(
    "--ifm-fontsize-header-button",
    header.button["font-size"]
  );
  root.style.setProperty(
    "--ifm-fontcolor-header-button",
    header.button["font-color"]
  );
  root.style.setProperty(
    "--ifm-buttoncolor-header-button",
    header.button["background-color"]
  );

  //feature configuration
  const { feature } = customConfig;

  root.getElementsByClassName("linkSection")[0].style.backgroundColor =
    feature["linkBackground-color"];
  root.getElementsByClassName(
    "linkSection"
  )[0].style.backgroundImage = `url(${feature["linkBackground-image"]})`;

  root.getElementsByClassName("basicSection")[0].style.backgroundColor =
    feature["basicBackground-color"];
  root.getElementsByClassName(
    "basicSection"
  )[0].style.backgroundImage = `url(${feature["basicBackground-image"]})`;
};
